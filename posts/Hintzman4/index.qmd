---
title: "Reproducing Hintzman's MINERVA (Part 4)"
author: "Bram Goh"
date: "2023-02-07"
categories: [code]
image: "Screenshot 2023-02-03 at 2.29.15 PM.png"
---

# Generalizing the code for more flexibility and brief thoughts on cosine similarity

First, I need to clean up my code: name variables such that I don't forget what they mean and define functions outside of other functions. Second, I need to generalize the code so that the number of categories is not hard coded .

```{r}
library(tidyverse)
set.seed(30)
num_of_pattern_feat <- 13
num_of_name_feat <- 10
num_of_trace_feat <- num_of_name_feat + num_of_pattern_feat
feat_values <- c(rep(1, 50), rep(-1, 50))
num_to_distort <- 4




# Generating prototype function
  
gen_proto <- function() {
   proto <- sample(feat_values, num_of_trace_feat, replace = TRUE)
   return(proto)
}

# Generating prototype copies --> yields proto_copies_matrix

gen_proto_copies <- function(input_vector) {
  full_proto_copies_matrix <- c()
  for(i in input_vector) {
    proto_single <- gen_proto()
    proto_copies <- matrix(rep(proto_single, i), nrow = i, ncol = num_of_trace_feat, byrow = TRUE)
    full_proto_copies_matrix <- rbind(full_proto_copies_matrix, proto_copies)
  }
  return(full_proto_copies_matrix)
}

# Generating traces in secondary memory with distortion --> yields memory_matrix

gen_secondary_memory <- function(input_vector, proto_copies_matrix) {
  total_num_traces_in_memory <- sum(input_vector)
  matrix_of_ones_for_name <- matrix(1, nrow = total_num_traces_in_memory, ncol = num_of_name_feat)
  matrix_of_pattern_distort <- t(replicate(n = total_num_traces_in_memory, sample(c(rep(1, num_of_pattern_feat - num_to_distort), rep(-1, num_to_distort)), num_of_pattern_feat)))
  distort_filter <- cbind(matrix_of_ones_for_name, matrix_of_pattern_distort)
  distorted_memories <- proto_copies_matrix * distort_filter
return(distorted_memories)
}
  
# Extracting unique prototypes (one for each category) --> yields proto_matrix

extract_unique_proto <- function(input_vector, proto_copies_matrix) {
  full_unique_proto_matrix <- c()
  row_counter <- 0
  for(i in input_vector) {
    proto_current <- proto_copies_matrix[row_counter + 1, ]
    full_unique_proto_matrix <- rbind(full_unique_proto_matrix, proto_current)
    row_counter <- row_counter + i
  }
return(full_unique_proto_matrix)
}

# Generating probes from prototypes --> yields probe_matrix

gen_probes_from_proto <- function(proto_matrix) {
  matrix_of_ones_for_name <- matrix(1, nrow = nrow(proto_matrix), ncol = num_of_name_feat)
  matrix_of_zeroes_for_pattern <- matrix(0, nrow = nrow(proto_matrix), ncol = num_of_pattern_feat)
  probe_filter <- cbind(matrix_of_ones_for_name, matrix_of_zeroes_for_pattern)
  probe_unique_matrix <- proto_matrix * probe_filter
  return(probe_unique_matrix)
}

# Echo activation function --> yields activations_matrix
calc_echo_activations <- function(probe_matrix, memory_matrix) {
full_probe_activations_matrix <- c()
  for(probe in 1:nrow(probe_matrix)) {
    all_activations_for_each_probe <- c()
    for(memory in 1:nrow(memory_matrix)) {
      num_of_relevant_features <- 0
      similarity_temp <- 0
      for(feat in 1:num_of_trace_feat) {
        current_product <- probe_matrix[probe, feat] * memory_matrix[memory, feat]
        similarity_temp <- similarity_temp + current_product
          if(probe_matrix[probe, feat] != 0 & memory_matrix[memory, feat] != 0) {
            num_of_relevant_features <- num_of_relevant_features + 1
          }
    }
    trace_similarity <- similarity_temp/num_of_relevant_features
    trace_activation <- trace_similarity ^ 3
    all_activations_for_each_probe <- c(all_activations_for_each_probe, trace_activation)
  }
full_probe_activations_matrix <- rbind(full_probe_activations_matrix, all_activations_for_each_probe)
}
return(full_probe_activations_matrix)
}

# Echo intensity function --> yields intensity_matrix
calc_echo_intensity <- function(activations_matrix) {
  full_intensity_matrix <- c()
  for(probe in 1:nrow(activations_matrix)) {
    echo_intensity_for_probe <- sum(activations_matrix[probe, ])
    full_intensity_matrix <- c(full_intensity_matrix, echo_intensity_for_probe) 
  }
  return(full_intensity_matrix)
}

# Echo content function --> yields content_matrix

calc_echo_content <- function(activations_matrix, memory_matrix) {
  full_echo_content_matrix <- c()
  for(probe in 1:nrow(activations_matrix)) {
    echo_content_for_each_probe <- c()
    for(feat in 1:num_of_trace_feat){
      content_temp <- 0
        for(memory in 1:nrow(memory_matrix)) {
          current_product <- activations_matrix[probe, memory] * memory_matrix[memory, feat]
          content_temp <- content_temp + current_product
        }
      echo_content_for_each_probe <- c(echo_content_for_each_probe, content_temp)
    }
    full_echo_content_matrix <- rbind(full_echo_content_matrix, echo_content_for_each_probe)
  }
  return(full_echo_content_matrix)
}

# Calculating prototype-echo correlation --> yields correlation_matrix

calc_proto_echo_corr <- function(proto_matrix, content_matrix) {
  full_correlation_matrix <- c()
  for(proto in 1:nrow(proto_matrix)) {
    correlation_current <- cor(proto_matrix[proto, ], content_matrix[proto, ])
    full_correlation_matrix <- c(full_correlation_matrix, correlation_current)
  }
  return(full_correlation_matrix)
}
```

```{r}
simulate_name_as_probe_calc_corr <- function(input_vector) {
  proto_copies_matrix <- gen_proto_copies(input_vector)
  memory_matrix <- gen_secondary_memory(input_vector, proto_copies_matrix)
  proto_matrix <- extract_unique_proto(input_vector, proto_copies_matrix)
  probe_matrix <- gen_probes_from_proto(proto_matrix)
  activations_matrix <- calc_echo_activations(probe_matrix, memory_matrix)
  content_matrix <- calc_echo_content(activations_matrix, memory_matrix)
  correlation_matrix <- calc_proto_echo_corr(proto_matrix, content_matrix)
  return(correlation_matrix)
}
```

```{r}
simulate_name_as_probe_calc_corr(c(3, 6, 9))
```

Finally, after much troubleshooting, it finally seems to work as intended. Time to simulate 20 subjects as Hintzman did and compare the mean prototype-echo correlations.

```{r}
my_corr <- t(replicate(20, simulate_name_as_probe_calc_corr(c(3,6,9))))
corr_means <- c(mean(my_corr[ ,1]), mean(my_corr[ , 2]), mean(my_corr[ , 3]))
corr_sds <- c(sd(my_corr[ ,1]), sd(my_corr[ , 2]), sd(my_corr[ , 3]))
corr_means
corr_sds
```

Interesting that my mean prototype-echo correlations are higher than Hintzman's, while my standard deviations are smaller. I'll need to verify these values with Matt.

As an aside, we had a conversation about cosine similarity and how it doesn't capture differences in vector length, only in the difference in degree.

-   What implications are there for memory? Hintzman conceptualizes memories as -1s or 1s, similar to how computers are able to code complex information into 0s and 1s. Thus, could vector length be already a built-in consideration, as one of the many features?

-   Given the bar chart diagram Matt drew, where the two bar charts are identical in their positive and negative direction figuration, but differ in the length of the bar, that makes me recall an explanation of correlation similarity that I learnt in class. Do both cosine and correlation similarity not capture vector length?
