---
title: "Reproducing Hintzman's MINERVA (Part 5)"
author: "Bram Goh"
date: "2023-02-10"
categories: [code]
image: ""
---

# Attempting to replicate the schema-abstraction task

```{r}
library(tidyverse)
set.seed(30)

# Initial parameters to set 

num_of_pattern_feat <- 13
num_of_name_feat <- 10
num_of_trace_feat <- num_of_name_feat + num_of_pattern_feat
feat_values <- c(rep(1, 50), rep(-1, 50))
num_to_distort <- 4

# Generating prototype function
  
gen_proto <- function() {
   proto <- sample(feat_values, num_of_trace_feat, replace = TRUE)
   return(proto)
}

# Generating prototype copies --> yields proto_copies_matrix

gen_proto_copies <- function(input_vector) {
  full_proto_copies_matrix <- c()
  for(i in input_vector) {
    proto_single <- gen_proto()
    proto_copies <- matrix(rep(proto_single, i), nrow = i, ncol = num_of_trace_feat, byrow = TRUE)
    full_proto_copies_matrix <- rbind(full_proto_copies_matrix, proto_copies)
  }
  return(full_proto_copies_matrix)
}

# Generating traces in secondary memory with distortion --> yields memory_matrix

gen_secondary_memory <- function(input_vector, proto_copies_matrix) {
  total_num_traces_in_memory <- sum(input_vector)
  matrix_of_ones_for_name <- matrix(1, nrow = total_num_traces_in_memory, ncol = num_of_name_feat)
  matrix_of_pattern_distort <- t(replicate(n = total_num_traces_in_memory, sample(c(rep(1, num_of_pattern_feat - num_to_distort), rep(-1, num_to_distort)), num_of_pattern_feat)))
  distort_filter <- cbind(matrix_of_ones_for_name, matrix_of_pattern_distort)
  distorted_memories <- proto_copies_matrix * distort_filter
return(distorted_memories)
}
  
# Extracting unique prototypes (one for each category) --> yields proto_matrix

extract_unique_proto <- function(input_vector, proto_copies_matrix) {
  full_unique_proto_matrix <- c()
  row_counter <- 0
  for(i in input_vector) {
    proto_current <- proto_copies_matrix[row_counter + 1, ]
    full_unique_proto_matrix <- rbind(full_unique_proto_matrix, proto_current)
    row_counter <- row_counter + i
  }
return(full_unique_proto_matrix)
}

# Generating probes from prototypes --> yields probe_matrix

gen_probes_from_proto <- function(proto_matrix) {
  matrix_of_ones_for_name <- matrix(1, nrow = nrow(proto_matrix), ncol = num_of_name_feat)
  matrix_of_zeroes_for_pattern <- matrix(0, nrow = nrow(proto_matrix), ncol = num_of_pattern_feat)
  probe_filter <- cbind(matrix_of_ones_for_name, matrix_of_zeroes_for_pattern)
  probe_unique_matrix <- proto_matrix * probe_filter
  return(probe_unique_matrix)
}

# Echo activation function --> yields activations_matrix
calc_echo_activations <- function(probe_matrix, memory_matrix) {
full_probe_activations_matrix <- c()
  for(probe in 1:nrow(probe_matrix)) {
    all_activations_for_each_probe <- c()
    for(memory in 1:nrow(memory_matrix)) {
      num_of_relevant_features <- 0
      similarity_temp <- 0
      for(feat in 1:num_of_trace_feat) {
        current_product <- probe_matrix[probe, feat] * memory_matrix[memory, feat]
        similarity_temp <- similarity_temp + current_product
          if(probe_matrix[probe, feat] != 0 & memory_matrix[memory, feat] != 0) {
            num_of_relevant_features <- num_of_relevant_features + 1
          }
    }
    trace_similarity <- similarity_temp/num_of_relevant_features
    trace_activation <- trace_similarity ^ 3
    all_activations_for_each_probe <- c(all_activations_for_each_probe, trace_activation)
  }
full_probe_activations_matrix <- rbind(full_probe_activations_matrix, all_activations_for_each_probe)
}
return(full_probe_activations_matrix)
}

# Echo intensity function --> yields intensity_matrix
calc_echo_intensity <- function(activations_matrix) {
  full_intensity_matrix <- c()
  for(probe in 1:nrow(activations_matrix)) {
    echo_intensity_for_probe <- sum(activations_matrix[probe, ])
    full_intensity_matrix <- c(full_intensity_matrix, echo_intensity_for_probe) 
  }
  return(full_intensity_matrix)
}

# Echo content function --> yields content_matrix

calc_echo_content <- function(activations_matrix, memory_matrix) {
  full_echo_content_matrix <- c()
  for(probe in 1:nrow(activations_matrix)) {
    echo_content_for_each_probe <- c()
    for(feat in 1:num_of_trace_feat){
      content_temp <- 0
        for(memory in 1:nrow(memory_matrix)) {
          current_product <- activations_matrix[probe, memory] * memory_matrix[memory, feat]
          content_temp <- content_temp + current_product
        }
      echo_content_for_each_probe <- c(echo_content_for_each_probe, content_temp)
    }
    full_echo_content_matrix <- rbind(full_echo_content_matrix, echo_content_for_each_probe)
  }
  return(full_echo_content_matrix)
}

# Calculating prototype-echo correlation --> yields correlation_matrix

calc_proto_echo_corr <- function(proto_matrix, content_matrix) {
  full_correlation_matrix <- c()
  for(proto in 1:nrow(proto_matrix)) {
    correlation_current <- cor(proto_matrix[proto, ], content_matrix[proto, ])
    full_correlation_matrix <- c(full_correlation_matrix, correlation_current)
  }
  return(full_correlation_matrix)
}
```

```{r}

# Makes all name features in secondary memory empty --> yields nameless_memory_matrix
remove_name_feat_from_memory <- function(memory_matrix) {
  zero_matrix <- matrix(0, nrow = nrow(memory_matrix), ncol = num_of_name_feat)
  one_matrix <- matrix(1, nrow = nrow(memory_matrix), ncol = num_of_pattern_feat)
  remove_name_filter <- cbind(zero_matrix, one_matrix)
  memory_matrix_without_name <- memory_matrix * remove_name_filter
  return(memory_matrix_without_name)
}

# Generates old exemplars already in secondary memory (probe a)
extract_old_exemplars <- function(input_vector, nameless_memory_matrix) {
  full_old_exemp_matrix <- c()
  row_counter <- 0
  for(i in input_vector) {
    old_exemp_current <- nameless_memory_matrix[row_counter + 1, ]
    full_old_exemp_matrix <- rbind(full_old_exemp_matrix, old_exemp_current)
    row_counter <- row_counter + i
  }
  return(full_old_exemp_matrix)
}

# Extracts prototype matrix with empty name features (probe b) --> yields nameless_proto_matrix

extract_unique_proto_without_names <- function(input_vector, proto_copies_matrix) {
  
  unique_protos <- extract_unique_proto(input_vector, proto_copies_matrix)
  zero_matrix <- matrix(0, nrow = nrow(unique_protos), ncol = num_of_name_feat)
  one_matrix <- matrix(1, nrow = nrow(unique_protos), ncol = num_of_pattern_feat)
  remove_name_filter <- cbind(zero_matrix, one_matrix)
  protos_without_name <- unique_protos * remove_name_filter
  return(protos_without_name)
}

# Generates new low-distorted exemplars (probe c)
gen_new_low_distort_exemp <- function(nameless_proto_matrix) {
  
  vector_of_ones_for_name <- rep(1, num_of_name_feat)
  vector_of_pattern_distort <- sample(c(rep(1, num_of_pattern_feat- 2), rep(-1, 2)), num_of_pattern_feat)
  distort_filter <- c(vector_of_ones_for_name, vector_of_pattern_distort)
  
  full_new_low_distort_matrix <- c()
  for(proto in 1:nrow(nameless_proto_matrix)) {
    current_new_low_distort <- nameless_proto_matrix[proto, ] * distort_filter
    full_new_low_distort_matrix <- rbind(full_new_low_distort_matrix, current_new_low_distort)
  }
return(full_new_low_distort_matrix)
  }

# Generates new high-distorted exemplars (probe d)
gen_new_high_distort_exemp <- function(nameless_proto_matrix) {
  
  vector_of_ones_for_name <- rep(1, num_of_name_feat)
  vector_of_pattern_distort <- sample(c(rep(1, num_of_pattern_feat- 4), rep(-1, 4)), num_of_pattern_feat)
  distort_filter <- c(vector_of_ones_for_name, vector_of_pattern_distort)
  
  full_new_high_distort_matrix <- c()
  for(proto in 1:nrow(nameless_proto_matrix)) {
    current_new_high_distort <- nameless_proto_matrix[proto, ] * distort_filter
    full_new_high_distort_matrix <- rbind(full_new_high_distort_matrix, current_new_high_distort)
  }
return(full_new_high_distort_matrix)
  }

# Generates random pattern (probe e)
gen_random_patterns <- function(nameless_proto_matrix) {
  full_random_pattern_matrix <- c()
  for(proto in 1:nrow(nameless_proto_matrix)) {
    name_vector <- nameless_proto_matrix[proto, 1:num_of_name_feat]
    random_pattern_feat_vector <- sample(feat_values, num_of_pattern_feat, replace = TRUE)
    current_random_vector <- c(name_vector, random_pattern_feat_vector)
    full_random_pattern_matrix <- rbind(full_random_pattern_matrix, current_random_vector)
  }
  return(full_random_pattern_matrix)
}

# Applies forgetting to traces in secondary memory
forgetting_cycle <- function(nameless_memory_matrix, f_value) {
  memory_matrix_post_forgetting <- c()
  for(trace in 1:nrow(nameless_memory_matrix)) {
    forget_filter <- rbinom(num_of_trace_feat, 1, 1 - f_value)
    current_forgotten_memory <- nameless_memory_matrix[trace, ] * forget_filter
    memory_matrix_post_forgetting <- rbind(memory_matrix_post_forgetting, current_forgotten_memory)
  }
  return(memory_matrix_post_forgetting)
}

# Extracts only name features from prototypes --> yields category_names
extract_category_names <- function(input_vector, proto_copies_matrix) {
  unique_protos <- extract_unique_proto(input_vector, proto_copies_matrix)
  cat_names <- unique_protos[ , 1:num_of_name_feat]
  return(cat_names)
}

# Extracts only name features from echo content --> yields echo_names
extract_echo_content_name_feat <- function(content_matrix) {
  echo_content_name <- content_matrix[ , 1:num_of_name_feat]
}

# Computes category name-echo content name correlation for each probe and assigns echo to category --> yields category_assign_vector
assign_category_for_each_echo <- function(category_names, echo_names) {
category_for_each_echo <- c()
for(e_name in 1:nrow(echo_names)) {
  cat_echo_name_cor <- c()
  for(c_name in 1:nrow(category_names)) {
    current_cor <- cor(echo_names[e_name, ], category_names[c_name, ])
    cat_echo_name_cor <- c(cat_echo_name_cor, current_cor)
  }
  if(max(cat_echo_name_cor) > 0) {
   current_answer_temp <- which(cat_echo_name_cor == max(cat_echo_name_cor))
  if(length(current_answer_temp) > 1) {
    current_answer <- sample(current_answer_temp, 1)
  }
   current_answer <- current_answer_temp
   }
  else {
    current_answer <- -9999
  }
  category_for_each_echo <- c(category_for_each_echo, current_answer)
}
return(category_for_each_echo)
}

check_assign_accuracy <- function(category_assign_vector, input_vector, num_types_of_probe){
  accuracy_vector <- category_assign_vector == rep(1:length(input_vector), num_types_of_probe)
  return(accuracy_vector)
  }
```

```{r}
schema_abstraction <- function(input_vector, num_types_of_probe) {
  proto_copies_matrix <- gen_proto_copies(input_vector)
  secondary_memory <- gen_secondary_memory(input_vector, proto_copies_matrix)
  
  nameless_memory_matrix <- remove_name_feat_from_memory(secondary_memory)
  
  old_exemplars <- extract_old_exemplars(input_vector, nameless_memory_matrix)
  nameless_proto_matrix <- extract_unique_proto_without_names(input_vector, proto_copies_matrix)
  new_low_distorts <- gen_new_low_distort_exemp(nameless_proto_matrix)
  new_high_distorts <- gen_new_high_distort_exemp(nameless_proto_matrix)
  random_patterns <- gen_random_patterns(nameless_proto_matrix)
  
  diverse_probes <- rbind(old_exemplars, nameless_proto_matrix, new_low_distorts, new_high_distorts, random_patterns)
  activations_matrix <- calc_echo_activations(diverse_probes, secondary_memory)
  content_matrix <- calc_echo_content(activations_matrix, secondary_memory)
  
  category_names <- extract_category_names(input_vector, proto_copies_matrix)
  echo_names <- extract_echo_content_name_feat(content_matrix)
  category_vector <- assign_category_for_each_echo(category_names, echo_names)
  accuracy_vector <- check_assign_accuracy(category_vector, input_vector, num_types_of_probe)
  return(accuracy_vector)
}

simulate_schema_abstraction <- function(input_vector, num_types_of_probe, num_of_simulations, column_names) {
  results_matrix <- t(replicate(num_of_simulations, schema_abstraction(input_vector, num_types_of_probe)))
  results_df <- data.frame(results_matrix)
  colnames(results_df) <- column_names
  return(results_df)
}
```

```{r}
# Test simulating 10 subjects

df_col_names <- c("old_exemp_1", "old_exemp_2", "old_exemp_3", "proto_1", "proto_2", "proto_3", "low_dist_1", "low_dist_2", "low_dist_3", "high_dist_1", "high_dist_2", "high_dist_3", "random_1", "random_2", "random_3")
hintz_input <- c(3, 6, 9)
schema_sim <- simulate_schema_abstraction(hintz_input, 5, 10, df_col_names)
```

Things I'm unsure about:

-   The probes contain empty name features, right?

-   The forgetting affects all features, including name features, right?

-   Does it matter which old exemplar I choose? (I've just chosen the first of each category)

There's something wrong with the code, especially when the number of simulations gets too high (e.g. 100). It seems the problem lies with the assign_category_for_each_echo function.
